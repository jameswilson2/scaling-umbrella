var map, latlngbounds, rangearea;
markers = [];
rangeareas = [];

$(function() {
	latlngbounds = new google.maps.LatLngBounds();
	
	map = new google.maps.Map(document.getElementById('map'), { mapTypeId:google.maps.MapTypeId.ROADMAP });
	
	for(var i = 0;i < areas.length;i++) {
		for(var j = 0;j < areas[i].area.length;j++) {
			latlngbounds.extend(areas[i].area[j]);
		}
		
		rangeareas.push( { coords:new google.maps.Polygon({
			paths: areas[i].area,
			strokeColor: '#14b9d6',
			strokeOpacity: 0.6,
			strokeWeight: 5,
			fillColor: '#14b9d6',
			fillOpacity: 0.35
		}),
		expanded:new google.maps.Polygon({
			paths: areas[i].expanded,
			strokeOpacity: 0,
			strokeWeight: 0,
			fillOpacity: 0
		})});
		//rangeareas[rangeareas.length - 1].expanded.setMap(map);	
		rangeareas[rangeareas.length - 1].coords.setMap(map);	
	}
	
	map.fitBounds(latlngbounds);
	
	$('#checkarea').submit(function() {
		var address = this.postcode.value;
		$.ajax({
			url:'http://maps.googleapis.com/maps/api/geocode/json?address='+address+'&sensor=false',
			success:function(data) {
				if(data.status == "OK") {
					if(markers) {
						for(var i = 0;i < markers.length;i++) {
							markers[i].setMap(null);
						}
						markers = [];
					}
					var newlatlngbounds = new google.maps.LatLngBounds();
	
					for(var i = 0;i < areas.length;i++) {
						for(var j = 0;j < areas[i].area.length;j++) {
							newlatlngbounds.extend(areas[i].area[j]);
						}
					}
					var found = false;
					var extendedfound = false;
					for(var i = 0;i < data.results.length;i++) {
						var result = data.results[i];
						var resultlocation = result.geometry.location;
						var resultlatlng = new google.maps.LatLng(resultlocation.lat,resultlocation.lng);
						newlatlngbounds.extend(resultlatlng);
						
						markers.push(new google.maps.Marker({position:resultlatlng,title:result.formatted_address,map:map}));
						
						for(var j = 0; j < rangeareas.length; j++) {
							found = found || rangeareas[j].coords.containsLatLng(resultlatlng);
							extendedfound = extendedfound || rangeareas[j].expanded.containsLatLng(resultlatlng);
						}
					}
					map.fitBounds(newlatlngbounds);
					
					setTimeout(function() {
						if(found || extendedfound) {
							if(found) {
								if(data.results.length > 1) {
									alert('Congratulations, you maybe within our range, please get in touch to make sure');
								} else {
									alert('Congratulations, you are within our range, please get in touch to ask about superfast broadband');
								}
							} else {
								if(data.results.length > 1) {
									alert('There is a chance you maybe within our range, please get in touch to make sure');
								} else {
									alert('There is a good chance you are within our range, please get in touch to ask about superfast broadband');
								}
							}
						} else {
							alert('Sorry, you are not within our range at the moment, please get in touch to ask when super fast broadband maybe in your area');
						}
					}, 300);
				} else {
					alert('Postcode not recognised');
				}
			}
		});
		return false;
	});
	var pc = getParameterByName('postcode');
	if(pc) {
		$('#postcode').val(pc);
		$('#checkarea').submit();
	}
});

function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

// Poygon getBounds extension - google-maps-extensions
// http://code.google.com/p/google-maps-extensions/source/browse/google.maps.Polygon.getBounds.js
if (!google.maps.Polygon.prototype.getBounds) {
  google.maps.Polygon.prototype.getBounds = function(latLng) {
    var bounds = new google.maps.LatLngBounds();
    var paths = this.getPaths();
    var path;
    
    for (var p = 0; p < paths.getLength(); p++) {
      path = paths.getAt(p);
      for (var i = 0; i < path.getLength(); i++) {
        bounds.extend(path.getAt(i));
      }
    }

    return bounds;
  }
}

// Polygon containsLatLng - method to determine if a latLng is within a polygon
google.maps.Polygon.prototype.containsLatLng = function(latLng) {
  // Exclude points outside of bounds as there is no way they are in the poly
 
  var lat, lng;

  //arguments are a pair of lat, lng variables
  if(arguments.length == 2) {
    if(typeof arguments[0]=="number" && typeof arguments[1]=="number") {
      lat = arguments[0];
      lng = arguments[1];
    }
  } else if (arguments.length == 1) {
    var bounds = this.getBounds();

    if(bounds != null && !bounds.contains(latLng)) {
      return false;
    }
    lat = latLng.lat();
    lng = latLng.lng();
  } else {
    console.log("Wrong number of inputs in google.maps.Polygon.prototype.contains.LatLng");
  }

  // Raycast point in polygon method
  var inPoly = false;

  var numPaths = this.getPaths().getLength();
  for(var p = 0; p < numPaths; p++) {
    var path = this.getPaths().getAt(p);
    var numPoints = path.getLength();
    var j = numPoints-1;

    for(var i=0; i < numPoints; i++) { 
      var vertex1 = path.getAt(i);
      var vertex2 = path.getAt(j);

      if (vertex1.lng() < lng && vertex2.lng() >= lng || vertex2.lng() < lng && vertex1.lng() >= lng) {
        if (vertex1.lat() + (lng - vertex1.lng()) / (vertex2.lng() - vertex1.lng()) * (vertex2.lat() - vertex1.lat()) < lat) {
          inPoly = !inPoly;
        }
      }

      j = i;
    }
  }

  return inPoly;
}